<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Nullable>enable</Nullable>
    <LangVersion>8.0</LangVersion>
    <DefineConstants>$(DefineConstants);INTERNAL_NULLABLE_ATTRIBUTES</DefineConstants>

    <IsPackable>true</IsPackable>
    <Version>0.0.5</Version>
    <Description>Preview feature for creating .NET for Android bindings directly from a Maven respository.</Description>
    <PackageOutputPath>../../nupkg</PackageOutputPath>
    
    <!-- By default NuGet referenced assemblies do not end up in the output directory.
         For a Tasks project they need to be available in the output directory. -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    
    <!-- Tell the SDK to generate a deps.json file, this is needed for the .nupkg. -->
    <GenerateDependencyFile>true</GenerateDependencyFile>
    
    <!-- Include symbol files (*.pdb) in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ILRepack" Version="2.0.18" PrivateAssets="all" />
    <PackageReference Include="MavenNet" Version="2.2.13" PrivateAssets="all" GeneratePathProperty="true" />    
    <PackageReference Include="Microsoft.Build.Utilities.Core" PrivateAssets="all" ExcludeAssets="Runtime" Version="16.10.0" />    
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" PrivateAssets="all" GeneratePathProperty="true" />    
    <PackageReference Include="NuGet.Common" Version="6.3.0" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="NuGet.Packaging" Version="6.3.0" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="NuGet.ProjectModel" Version="6.3.0" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <ItemGroup>
    <None Update="XamPrototype.Android.MavenBinding.Tasks.targets" Pack="true" PackagePath="build" />
    
    <!-- This is needed because the `lib/{TFM}` folders tell NuGet what frameworks this package supports,
         and we aren't writing anything to those folders because we have no managed assemblies (NU5127) -->
    <None Update="_._" Pack="True" PackagePath="lib/netstandard2.0/" Visible="false" />
  </ItemGroup>
  
  <PropertyGroup>
    <!-- This target will run when MSBuild is collecting the files to be packaged, and we'll implement it below.
    This property controls the dependency list for this packaging process, so by adding our custom property we
    hook ourselves into the process in a supported way. -->
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    
    <!-- This property tells MSBuild where the root folder of the package's build assets should be.
    Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    
    <!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_
    do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
    <NoWarn>$(NoWarn);NU5100</NoWarn>
  </PropertyGroup>
  
  <!-- This is the target we defined above. It's purpose is to add all of our PackageReference
  and ProjectReference's runtime assets to our package output.  -->
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <!-- The TargetPath is the path inside the package that the source file will be placed.
      This is already precomputed in the ReferenceCopyLocalPaths items' DestinationSubPath, so reuse it here. -->
      <!-- Commented out due to ILRepack-->
      <!--<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />-->
    </ItemGroup>
  </Target>

  <!-- This target adds the generated deps.json file to our package output -->
  <Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">

    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
    </ItemGroup>
  </Target>

  <Target Name="ILRepacker" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
    <ItemGroup>
      <InputAssemblies Include="$(TargetPath)" />
      <InputAssemblies Include="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>

    <Exec Command="$(ILRepack) /out:$(TargetPath) /internalize:excluded.txt /lib:$(PkgNewtonsoft_Json)\lib\netstandard2.0 @(InputAssemblies->'&quot;%(Identity)&quot;', ' ')" />
  </Target>
</Project>
